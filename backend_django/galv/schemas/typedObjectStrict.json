{
  "$schema": "https://json-schema.org/draft/2020-12/schema#",
  "description": "JSON schema for Galv typed JSON. All items are objects with a _type and _value field only. The _type will be one of the core JSON data types, or a custom string. If _type is a core JSON primitive, _value must have that type. If _type is 'array', then the contents must be items with _type and _value fields. If _type is 'object', then _value must be a JSON object with _type and _value fields. If _type is 'object', _value will be an object with each property value being an object with _type and _value fields. If _type is a custom string, _value can be any JSON primitive, an object with properties that are objects with _type and _value, or an array of objects with _type and _value.",
  "$defs": {
    "typedObjectProperty": {
      "$comment": "typedObjectProperty is either a known JSON type or a custom one. In either case, it is an object with _type and _value fields only. Different typed* types are used to enforce the correct _value type for each _type.",
      "anyOf": [
        {
          "$ref": "#/$defs/typedString"
        },
        {
          "$ref": "#/$defs/typedNumber"
        },
        {
          "$ref": "#/$defs/typedBoolean"
        },
        {
          "$ref": "#/$defs/typedNull"
        },
        {
          "$ref": "#/$defs/typedObject"
        },
        {
          "$ref": "#/$defs/typedArray"
        },
        {
          "$ref": "#/$defs/typedUnknown"
        }
      ]
    },
    "typedString": {
      "type": "object",
      "properties": {
        "_type": {
          "const": "string"
        },
        "_value": {
          "type": "string"
        }
      },
      "required": [
        "_type",
        "_value"
      ],
      "additionalProperties": false
    },
    "typedNumber": {
      "type": "object",
      "properties": {
        "_type": {
          "const": "number"
        },
        "_value": {
          "type": "number"
        }
      },
      "required": [
        "_type",
        "_value"
      ],
      "additionalProperties": false
    },
    "typedBoolean": {
      "type": "object",
      "properties": {
        "_type": {
          "const": "boolean"
        },
        "_value": {
          "type": "boolean"
        }
      },
      "required": [
        "_type",
        "_value"
      ],
      "additionalProperties": false
    },
    "typedNull": {
      "type": "object",
      "properties": {
        "_type": {
          "const": "null"
        },
        "_value": {
          "type": "null"
        }
      },
      "required": [
        "_type",
        "_value"
      ],
      "additionalProperties": false
    },
    "typedObject": {
      "type": "object",
      "properties": {
        "_type": {
          "const": "object"
        },
        "_value": {
          "$ref": "#"
        }
      },
      "required": [
        "_type",
        "_value"
      ],
      "additionalProperties": false
    },
    "typedArray": {
      "type": "object",
      "properties": {
        "_type": {
          "const": "array"
        },
        "_value": {
          "type": "array",
          "$comment": "Array items are objects with _type and _value fields only, so each item in the array is individually typed.",
          "items": {
            "$ref": "#/$defs/typedObjectProperty"
          }
        }
      },
      "required": [
        "_type",
        "_value"
      ],
      "additionalProperties": false
    },
    "typedUnknown": {
      "$comment": "Custom types can be signified by using anything for _type that doesn't match the core JSON types. The _value can be any JSON primitive, an object with properties that are objects with _type and _value, or an array of objects with _type and _value.",
      "type": "object",
      "properties": {
        "_type": {
          "type": "string"
        },
        "_value": {
          "anyOf": [
            {
              "$ref": "#/$defs/typedObjectProperty"
            },
            {
              "$ref": "#"
            },
            {
              "type": [
                "string",
                "number",
                "boolean",
                "null"
              ]
            }
          ]
        }
      },
      "required": [
        "_type",
        "_value"
      ],
      "additionalProperties": false
    }
  },
  "additionalProperties": {
    "$ref": "#/$defs/typedObjectProperty"
  },
  "title": "Galv typed JSON - strict",
  "type": "object"
}

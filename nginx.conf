# adapted from https://docs.gunicorn.org/en/latest/deploy.html
worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  include mime.types;
  access_log /var/log/nginx/access.log combined;
  sendfile on;

  # >>> FROM default nginx.conf
  tcp_nopush on;
  types_hash_max_size 2048;
  # server_tokens off;

  # server_names_hash_bucket_size 64;
  # server_name_in_redirect off;

  # include /etc/nginx/mime.types;

  ##
  # Logging Settings
  ##
  # error_log /var/log/nginx/error.log;

  ##
  # Gzip Settings
  ##

  gzip on;

  # gzip_vary on;
  # gzip_proxied any;
  # gzip_comp_level 6;
  # gzip_buffers 16 8k;
  # gzip_http_version 1.1;
  # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

  # <<< END FROM default nginx.conf

  upstream django {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    # server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    server localhost:8000 fail_timeout=0;
  }

  server {
      listen       80;  # mapped to 8001 in docker-compose.yml
      listen  [::]:80;
      server_name  localhost;
      client_max_body_size 4G;  # support uploading large datafiles

      keepalive_timeout 5;

      #access_log  /var/log/nginx/host.access.log  main;

      # data location should match the DATA_URL that Django is serving the data from.
      location /data/ {
          allow 127.0.0.1;
          internal;
          alias /galv_files/data/;
          # support cross domain requests (CORS), needed when xAccelRedirect is enabled on file servers
          add_header Access-Control-Allow-Origin *;
          add_header Access-Control-Allow-Headers "Content-Type, Content-Range, Content-Disposition, Content-Description";
          add_header Access-Control-Allow-Credentials true;
      }

      location ~ /(static|media)/ {
        # We serve static and media files directly from /static and /media
        # If this changes, also change the settings in the Django app
        root /galv_files/;
        # checks for static file, if not found proxy to app
        try_files $uri @proxy_to_app;
      }

      location / {
        # always proxy to the app server
        try_files _ @proxy_to_app;
      }

      location @proxy_to_app {
          proxy_http_version 1.1;
          proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
          # proxy_set_header X-Forwarded-Proto \$scheme;  # causes header conflict on fly.io
          proxy_set_header X-Forwarded-Host \$host;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP \$remote_addr;
          proxy_set_header Upgrade \$http_upgrade;
          proxy_set_header X-Request-Id \$pid-\$msec-\$remote_addr-\$request_length;
          proxy_set_header Connection "upgrade";
          # we don't want nginx trying to do something clever with
          # redirects, we set the Host: header above already.
          proxy_redirect off;
          proxy_pass http://django;
          proxy_read_timeout 600;
          proxy_send_timeout 600;
      }

      #error_page  404              /404.html;

      # redirect server error pages to the static page /50x.html
      #
      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
          root   /usr/share/nginx/html;
      }
  }

#   server {
#     # if no Host match, close the connection to prevent host spoofing
#     listen 80 default_server;
#     return 444;
#   }
}

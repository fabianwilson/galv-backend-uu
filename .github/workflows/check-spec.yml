name: OpenAPI spec compatibility
on:
  workflow_call:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
      dry-run:
        type: boolean
        description: 'Do not actually release the package, just check that it is valid.'
        required: false
        default: false
      allow_breaking_changes:
        type: boolean
        description: 'Breaking changes are allowed. You probably should not be using this.'
        required: false
        default: false
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
      skip_match_check:
        type: boolean
        description: 'Skip checking that the release version matches the branch name.'
        required: false
        default: false
      dry-run:
        type: boolean
        description: 'Do not actually release the package, just check that it is valid.'
        required: false
        default: false
      allow_breaking_changes:
        type: boolean
        description: 'Breaking changes are allowed. You probably should not be using this.'
        required: false
        default: false

jobs:
  version:
    uses: ./.github/workflows/get-version.yml
    secrets: inherit

  check:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} || ${{ github.event_name == 'workflow_dispatch' }}
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ inputs.debug_enabled }}

      - name: Check version matches ref
        if: ${{ !inputs.dry-run && (github.event_name != 'workflow_dispatch' || !inputs.skip_match_check) }}
        run: |
          # Assert that the release version matches the branch name
          if [ "${{ needs.version.outputs.version }}" != "${{ github.ref_name }}" ]; then
              echo "Release version ${{ needs.version.outputs.version }} does not match version in tag name ${{ github.ref_name }}"
              exit 1
          fi

      - name: Setup docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          mkdir -p .dev/spec
          sudo chmod 777 .dev/spec
          touch .env.secret

      - name: Generate spec
        run: |
          # using x rather than a number means it appears later and gets picked up by `tail -n 1` in check_spec
          docker-compose run --rm -e AWS_SECRET_ACCESS_KEY="not_set" --entrypoint "/bin/bash -c" app "python manage.py spectacular --format openapi-json >> /spec/openapi-x.json"
          # Copy spec for upload
          cp .dev/spec/openapi-x.json .dev/spec/openapi-${{ needs.version.outputs.version }}.json

      - name: Check vs previous spec
        if: ${{ needs.version.outputs.prev-version-tag != '' }}
        run: |
          sudo chmod 777 .dev/spec/*
          wget -O .dev/spec/openapi-${{ needs.version.outputs.prev-version-tag }}.json https://github.com/galv-team/galv-backend/releases/download/${{ needs.version.outputs.prev-version-tag }}/openapi-${{ needs.version.outputs.prev-version-tag }}.json
          echo "Downloaded spec for previous version: ${{ needs.version.outputs.prev-version-tag }}. First 10 lines:"
          head -n 10 .dev/spec/openapi-${{ needs.version.outputs.prev-version-tag }}.json
          echo "---------"
          echo "Check spec against previous version: ${{ needs.version.outputs.prev-version-tag }}"
          if [[ "${{ needs.version.outputs.is-major-release }}" == "true" || "${{ inputs.allow_breaking_changes }}" == "true" ]]; then
            sudo docker-compose run --rm -e REMOTE_SPEC_SOURCE=/spec/openapi-${{ needs.version.outputs.prev-version-tag }}.json check_spec || true
          else
            sudo docker-compose run --rm -e REMOTE_SPEC_SOURCE=/spec/openapi-${{ needs.version.outputs.prev-version-tag }}.json check_spec
          fi
          ls -l .dev/spec
          echo ".dev/spec/diff.md:"
          cat .dev/spec/diff.md

      - name: Upload spec
        uses: actions/upload-artifact@v4
        with:
          name: spec
          path: .dev/spec/openapi-${{ needs.version.outputs.version }}.json
          retention-days: 1

      - name: Upload diff
        uses: actions/upload-artifact@v4
        with:
          name: diff
          path: .dev/spec/diff.md
          retention-days: 1

  make-clients:
    needs:
      - check
      - version
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Make clients directory
        run: |
          mkdir clients

      - name: Retrieve spec artifacts
        uses: actions/download-artifact@v4
        with:
          name: spec
          path: .dev/spec

      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ inputs.debug_enabled }}

      - name: Specify openapi-generator version
        run: docker pull openapitools/openapi-generator-cli:v6.6.0

      - name: Create python config
        run: |
          echo '{"packageName": "galv", "packageVersion": "${{ needs.version.outputs.version-plain }}"}' >> python-config.json
          cat python-config.json

      - name: Create API client - python
        run: |
          JSON_FILE=$(ls .dev/spec/*.json)
          docker run --rm -v "${PWD}:/local" openapitools/openapi-generator-cli:v6.6.0 generate \
          -i "/local/$JSON_FILE" \
          -g python \
          -c /local/python-config.json \
          -o /local/clients/python

          # Copy LICENCE file to client directory
          sudo cp LICENCE clients/python/LICENCE

          tree clients/python

          # zip the client
          zip -r clients/galv-client-python.zip clients/python

      - name: Create API client - typescript-axios
        env:
          VERSION: ${{ needs.version.outputs.version-plain }}
        run: |
          # Create a config json file using EOF notation
          echo '{"useSingleRequestParameter": true}' >> typescript-axios-config.json
          JSON_FILE=$(ls .dev/spec/*.json)
          docker run --rm -v "${PWD}:/local" openapitools/openapi-generator-cli:v6.6.0 generate \
          -i "/local/$JSON_FILE" \
          -g typescript-axios \
          -c /local/typescript-axios-config.json \
          -o /local/clients/typescript-axios

          # Copy LICENCE file to client directory
          sudo cp LICENCE clients/typescript-axios/LICENCE

          # Create a package.json file using EOF notation
          cat << EOF | sudo tee -a clients/typescript-axios/package.json
          {
              "name": "@galv/galv",
              "version": "$VERSION",
              "description": "Galv API client using Typescript-Axios",
              "main": "index.ts",
              "scripts": {
                "test": "echo \"Error: no test specified\" && exit 1"
              },
              "keywords": [
                "galv",
                "galv-api",
                "galv-client",
                "typescript-axios"
              ],
              "author": "Battery Intelligence Lab",
              "license": "See LICENCE File",
              "dependencies": {
                "axios": "^0.21.1"
              }
          }
          EOF

          # zip the client
          zip -r clients/galv-client-typescript-axios.zip clients/typescript-axios

      - name: Setup publishing typescript client to packages
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Publish typescript client to packages
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_PUBLISH_TOKEN }}
          package: "clients/typescript-axios"
          access: "public"
          dry-run: ${{ inputs.dry-run }}

      - name: Upload clients
        uses: actions/upload-artifact@v4
        with:
          name: clients
          path: clients/*.zip
          retention-days: 1

      - name: Upload python client code
        uses: actions/upload-artifact@v4
        with:
          name: python
          path: clients/python
          retention-days: 1
